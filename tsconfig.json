{
  "compilerOptions": {
    // 目标哦代码（ts -> js(es5/6/7)）
    "target": "esnext",

    /*
      目标代码使用的模块化方案
        * commonjs require/module.exports
        * es module import/export
    */
    "module": "esnext",

    // 一些严格的检查（any）
    "strict": true,

    // 对jsx做怎样的处理， preserve：保留
    "jsx": "preserve",

    //辅助的导入功能： 不支持的语法进行支持
    "importHelpers": true,

    //按照node的方式去解析模块  import "/index.node"
    "moduleResolution": "node",

    //跳过一些库的类型检测（axios -> 类型/ lodash -> @types/lodash / 其他第三方库）
    "skipLibCheck": true,

    //export default / module.exports ={}
    // es module 和 commonjs能不能混用
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,

    // 要不要生成映射文件(ts -> js)
    "sourceMap": true,

    // 文件路径在解析时，基本url
    "baseUrl": ".",

    //指定具体要解析使用的类型
    "types": ["webpack-env"],

    //路径解析
    "paths": {
      "@/*": ["src/*"]
    },

    // 可以指定在项目中可以使用哪里库的类型(Proxy/Window/Document)
    "lib": ["esnext", "dom", "dom.iterable", "scripthost"]
  },

  // 哪些js文件是需要解析的
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],

  //排除要解析的模块
  "exclude": ["node_modules"]
}
